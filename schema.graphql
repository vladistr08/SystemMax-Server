scalar DateTime
scalar Date

input createUserInput{
    username: String!
    password: String!
    email: String!
    name: String!
}

type createUserResult{
    user: User
}

input loginUserInput{
    email: String!
    password: String!
}

type User{
    user_id: String
    username: String
    passwordHash: String
    email: String
    name: String
    createdAt: String
}

type loginUserResult{
    user: User
    token: String
}

input toUpdateUserDataInput{
    username: String
    email: String
    password: String
    name: String
}

type updateUserResult{
    isUpdated: Boolean
}

type LogoutResponse {
    message: String!
}

input getUserInput {
    email: String
    user_id: String
}

type getUserResult {
    user: User
}

input getAssistantInput {
    message: String!
}

type getAssistantResult {
    message: String
}

type Query {
    """
    - query for getting the api version
    """
    version: String
    """
    - auth
    """
    loginUser(input: loginUserInput!): loginUserResult
    getUser(input: getUserInput): getUserResult
    getAssistantResponse(input: getAssistantInput!): getAssistantResult

}

type Mutation {
    """
    - query for getting the api version
    """
    version: String
    """
    - create user/auth
    """
    createUser(input: createUserInput!): createUserResult
    updateUser(input: toUpdateUserDataInput!): updateUserResult
    logoutUser: LogoutResponse
}

schema {
    query: Query
    mutation: Mutation
}